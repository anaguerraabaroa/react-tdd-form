{"version":3,"sources":["services/productServices.js","form/Form.js","const/htttpStatus.js","App.js","reportWebVitals.js","index.js"],"names":["saveProduct","name","size","type","fetch","method","headers","body","JSON","stringify","Form","useState","formErrors","setFormErrors","isSaving","setIsSaving","isSuccess","setIsSuccess","errorMessage","setErrorMessage","validateField","value","prevState","length","validateForm","getFormValues","handleFetchErrors","err","a","status","json","data","message","handleSubmit","e","preventDefault","target","elements","response","ok","reset","handleBlur","Container","maxWidth","CssBaseline","Box","my","Typography","component","variant","align","color","onSubmit","Grid","container","spacing","item","xs","TextField","fullWidth","label","id","helperText","onBlur","error","FormControl","InputLabel","htmlFor","Select","native","inputProps","aria-label","FormHelperText","Button","disabled","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c8f4f6a8.chunk.js","sourcesContent":["export const saveProduct = ({name, size, type}) =>\r\n  // async fetch\r\n  fetch('/products', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({name, size, type}),\r\n  })\r\n\r\nexport default {\r\n  saveProduct,\r\n}\r\n","import {useState} from 'react'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport Select from '@material-ui/core/Select'\r\nimport Button from '@material-ui/core/Button'\r\nimport Container from '@material-ui/core/Container'\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport FormHelperText from '@material-ui/core/FormHelperText'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport Box from '@material-ui/core/Box'\r\n\r\nimport {saveProduct} from '../services/productServices'\r\nimport {\r\n  CREATED_STATUS,\r\n  ERROR_SERVER_STATUS,\r\n  INVALID_REQUEST_STATUS,\r\n} from '../const/htttpStatus'\r\n\r\nexport const Form = () => {\r\n  // form error messages state\r\n  const [formErrors, setFormErrors] = useState({\r\n    name: '',\r\n    size: '',\r\n    type: '',\r\n  })\r\n  // form submit button state\r\n  const [isSaving, setIsSaving] = useState(false)\r\n\r\n  // server success message\r\n  const [isSuccess, setIsSuccess] = useState(false)\r\n\r\n  // server error messages\r\n  const [errorMessage, setErrorMessage] = useState('')\r\n\r\n  // set validation error messages by field name state\r\n  const validateField = ({name, value}) => {\r\n    setFormErrors(prevState => ({\r\n      ...prevState,\r\n      [name]: value.length ? '' : `The ${name} is required`,\r\n    }))\r\n  }\r\n\r\n  // run validation error messages by field name function\r\n  const validateForm = ({name, size, type}) => {\r\n    validateField({name: 'name', value: name})\r\n    validateField({name: 'size', value: size})\r\n    validateField({name: 'type', value: type})\r\n  }\r\n\r\n  // get form values\r\n  const getFormValues = ({name, size, type}) => ({\r\n    name: name.value,\r\n    size: size.value,\r\n    type: type.value,\r\n  })\r\n\r\n  // handle fetch errors\r\n  const handleFetchErrors = async err => {\r\n    // set server error message state\r\n    if (err.status === ERROR_SERVER_STATUS) {\r\n      setErrorMessage('Unexpected error, please try again')\r\n      return\r\n    }\r\n\r\n    // set server invalid request message state\r\n    if (err.status === INVALID_REQUEST_STATUS) {\r\n      const data = await err.json()\r\n      setErrorMessage(data.message)\r\n      return\r\n    }\r\n    // set not found service message state\r\n    setErrorMessage('Connection error, please try later')\r\n  }\r\n\r\n  // submit button event handler\r\n  const handleSubmit = async e => {\r\n    e.preventDefault()\r\n\r\n    // set submit button state\r\n    setIsSaving(true)\r\n\r\n    // access to TextField component inputs by id destructuring\r\n    const {name, size, type} = e.target.elements\r\n\r\n    // run form validation error messages function\r\n    validateForm(getFormValues({name, size, type}))\r\n\r\n    // control server responses\r\n    try {\r\n      // run fetch\r\n      const response = await saveProduct(getFormValues({name, size, type}))\r\n\r\n      // validate fetch response to throw success or error messages\r\n      if (!response.ok) {\r\n        throw response\r\n      }\r\n\r\n      // reset fields values and set server success message state\r\n      if (response.status === CREATED_STATUS) {\r\n        e.target.reset()\r\n        setIsSuccess(true)\r\n      }\r\n      // run handleFetchErrors function\r\n    } catch (err) {\r\n      handleFetchErrors(err)\r\n    }\r\n\r\n    // update submit button state\r\n    setIsSaving(false)\r\n  }\r\n\r\n  // input blur event handler\r\n  const handleBlur = e => {\r\n    // access to TextField component inputs by name destructuring\r\n    const {name, value} = e.target\r\n\r\n    // run validation error messages by field function\r\n    validateField({name, value})\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"xs\">\r\n      <CssBaseline />\r\n\r\n      <Box my={20}>\r\n        <Typography component=\"h1\" variant=\"h4\" align=\"center\" color=\"primary\">\r\n          Create product\r\n        </Typography>\r\n\r\n        {isSuccess && <p>Product Stored</p>}\r\n\r\n        <p>{errorMessage}</p>\r\n\r\n        <form onSubmit={handleSubmit}>\r\n          <Grid container spacing={4}>\r\n            {/* Material UI requires to add id to TextField component since \r\n    it returns labels+inputs that must be related through the id */}\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"name\"\r\n                id=\"name\"\r\n                name=\"name\"\r\n                helperText={formErrors.name}\r\n                onBlur={handleBlur}\r\n                error={!!formErrors.name.length}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"size\"\r\n                id=\"size\"\r\n                name=\"size\"\r\n                helperText={formErrors.size}\r\n                onBlur={handleBlur}\r\n                error={!!formErrors.size.length}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n              <FormControl fullWidth error={!!formErrors.type.length}>\r\n                <InputLabel htmlFor=\"type\">type</InputLabel>\r\n                <Select\r\n                  fullWidth\r\n                  native\r\n                  error={!!formErrors.type.length}\r\n                  inputProps={{\r\n                    name: 'type',\r\n                    id: 'type',\r\n                  }}\r\n                >\r\n                  <option aria-label=\"None\" value=\"\" />\r\n                  <option value={'electronic'}>Electronic</option>\r\n                  <option value={'furniture'}>Furniture</option>\r\n                  <option value={'clothing'}>Clothing</option>\r\n                </Select>\r\n                <FormHelperText>\r\n                  {!!formErrors.type && <p>{formErrors.type}</p>}\r\n                </FormHelperText>\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n              <Button\r\n                fullWidth\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                type=\"submit\"\r\n                disabled={isSaving}\r\n              >\r\n                Submit\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </Box>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Form\r\n","// server status variables\r\nexport const CREATED_STATUS = 201\r\nexport const ERROR_SERVER_STATUS = 500\r\nexport const INVALID_REQUEST_STATUS = 400\r\n\r\nexport default {\r\n  CREATED_STATUS,\r\n  ERROR_SERVER_STATUS,\r\n}\r\n","import React from 'react'\n\nimport {Form} from './form/Form'\n\nfunction App() {\n  return <Form />\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}